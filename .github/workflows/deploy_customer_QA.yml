name: Deploy Microservices to Production EC2

on:
  push:
    branches:
      - test  

jobs:
  build_and_push_images:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Build y push Create Customer
      - name: Build and push create-customer image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/create-customer:latest ./Backend/customer_service/Create_Customer
          docker push ${{ secrets.DOCKER_USERNAME }}/create-customer:latest

      # Build y push Delete Customer
      - name: Build and push delete-customer image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/delete-customer:latest ./Backend/customer_service/Delete_Customer
          docker push ${{ secrets.DOCKER_USERNAME }}/delete-customer:latest

      # Build y push Create Delivery
      - name: Build and push create-delivery image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/create-delivery:latest ./Backend/delivery_service/Create_Delivery
          docker push ${{ secrets.DOCKER_USERNAME }}/create-delivery:latest

  deploy_to_ec2:
    runs-on: ubuntu-latest
    needs: build_and_push_images
    
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            sudo apt update -y
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker

            # Crear red Docker si no existe
            docker network create microservices_net || true

            # Parar y eliminar contenedores antiguos
            docker stop create-customer delete-customer create-delivery || true
            docker rm create-customer delete-customer create-delivery || true

            # Pull im√°genes
            docker pull ${{ secrets.DOCKER_USERNAME }}/create-customer:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/delete-customer:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/create-delivery:latest

            # Ejecutar contenedores con sus variables de entorno y puertos
            docker run -d --name create-customer --network microservices_net -p 8001:8001 \
              -e PG_HOST=postgres-customer -e PG_PORT=5432 -e PG_DATABASE=customer_db -e PG_USER=postgres -e PG_PASSWORD=mysecret \
              ${{ secrets.DOCKER_USERNAME }}/create-customer:latest

            docker run -d --name delete-customer --network microservices_net -p 8002:8002 \
              -e PG_HOST=postgres-customer -e PG_PORT=5432 -e PG_DATABASE=customer_db -e PG_USER=postgres -e PG_PASSWORD=mysecret \
              ${{ secrets.DOCKER_USERNAME }}/delete-customer:latest

            docker run -d --name create-delivery --network microservices_net -p 8007:8007 \
              -e PG_HOST=postgres-delivery -e PG_PORT=5432 -e PG_DATABASE=delivery_db -e PG_USER=postgres -e PG_PASSWORD=mysecret \
              ${{ secrets.DOCKER_USERNAME }}/create-delivery:latest
