name: Deploy Login Microservices to EC2

on:
  push:
    branches:
      - test
  workflow_dispatch:

jobs:
  build_and_push_images:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push auth-service
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/auth-service:latest ./Backend/login-service/auth-service
          docker push ${{ secrets.DOCKER_USERNAME }}/auth-service:latest

      - name: Build and push authorization-service
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/authorization-service:latest ./Backend/login-service/authorization-service
          docker push ${{ secrets.DOCKER_USERNAME }}/authorization-service:latest

  deploy:
    name: Deploy Auth + Authorization on EC2
    runs-on: ubuntu-latest
    needs: build_and_push_images

    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST_LOGIN_TEST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Instalar Docker si es necesario
            sudo apt update -y
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker

            # Crear red si no existe
            docker network create app-network || true

            # Detener y eliminar contenedores antiguos
            docker stop auth-service authorization-service postgres-db || true
            docker rm auth-service authorization-service postgres-db || true

            # Levantar base de datos PostgreSQL
            docker run -d \
              --name postgres-db \
              --network app-network \
              -e POSTGRES_DB=login_db \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=Mypassword \
              -p 5432:5432 \
              -v pgdata:/var/lib/postgresql/data \
              postgres:14

            # Esperar a que PostgreSQL esté disponible
            echo "Esperando a que PostgreSQL esté listo..."
            sleep 20

            # Descargar imágenes desde Docker Hub
            docker pull ${{ secrets.DOCKER_USERNAME }}/auth-service:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/authorization-service:latest

            # Ejecutar auth-service
            docker run -d \
              --name auth-service \
              --network app-network \
              -p 8001:8000 \
              --env-file /home/ubuntu/.env-auth \
              ${{ secrets.DOCKER_USERNAME }}/auth-service:latest

            # Ejecutar authorization-service
            docker run -d \
              --name authorization-service \
              --network app-network \
              -p 8002:8002 \
              --env-file /home/ubuntu/.env-authorization \
              ${{ secrets.DOCKER_USERNAME }}/authorization-service:latest
