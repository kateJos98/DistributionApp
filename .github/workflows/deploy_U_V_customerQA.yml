name: Deploy Update_View Customer Microservices to EC2

on:
  push:
    branches:
      - test

jobs:
  build_and_push_images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Update Customer Microservice
        uses: docker/build-push-action@v5
        with:
          context: ./Backend/customer_service/Update_Customer
          file: ./Backend/customer_service/Update_Customer/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/update-customer:latest

      - name: Build and push View Customer Microservice
        uses: docker/build-push-action@v5
        with:
          context: ./Backend/customer_service/View_Customer
          file: ./Backend/customer_service/View_Customer/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/view-customer:latest

  deploy_to_ec2:
    name: Deploy Docker Containers to EC2
    runs-on: ubuntu-latest
    needs: build_and_push_images

    steps:
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST_CUSTOMER_UPDATE_VIEW_TEST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Instalar Docker si no está presente
            if ! command -v docker &> /dev/null; then
              sudo apt update -y
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            # Crear archivo .env 
            cat <<EOF > .env
            DB_HOST=${{ secrets.MYSQL }}
            DB_PORT=3307
            DB_NAME=customer_db
            DB_USER=root
            DB_PASSWORD=${{ secrets.DB_PASSWORD_MYSQL }}
            KAFKA_BROKER=${{ secrets.KAFKA }}:9092
            AUTH_SERVICE_URL=http://${{ secrets.EC2_HOST_AUTH_TEST }}:8002/validate-role
            NODE_ENV=development
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            ALGORITHM=${{ secrets.ALGORITHM }}

            EOF

            # Detener y eliminar contenedores previos
            docker stop update-customer view-customer || true
            docker rm update-customer view-customer || true

            # Descargar las últimas imágenes
            docker pull ${{ secrets.DOCKER_USERNAME }}/update-customer:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/view-customer:latest

            # Ejecutar los contenedores
            docker run -d --restart unless-stopped \
            --name update-customer \
            --network app-network \
            -env-file /home/ubuntu/.env \
            -p 8010:80 \
            ${{ secrets.DOCKER_USERNAME }}/update-customer:latest

            docker run -d --restart unless-stopped \
              --name view-customer \
              --network app-network \
              --env-file /home/ubuntu/.env \
              -p 8005:8005 \
              ${{ secrets.DOCKER_USERNAME }}/view-customer:latest
                